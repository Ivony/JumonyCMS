<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ivony.Html.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:Ivony.Html.Web.Mvc.CacheFilterBase">
            <summary>
            输出缓存筛选器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            重写此方法以输出缓存
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.ResolveCache(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            尝试输出缓存
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.ResolveCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            尝试输出缓存
            </summary>
            <param name="context">当前请求上下文</param>
            <param name="action">当前请求的 Action</param>
            <param name="parameters">Action 的参数值</param>
            <returns>若可以缓存输出，则返回输出缓存的 ActionResult</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context"></param>
            <param name="action"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            重写 OnResultExecuting 方法以应用客户端缓存策略
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.ApplyClientCachePolicy(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            在输出任何内容前，应用客户端缓存策略
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            重写此方法使得操作结果执行完毕后，更新缓存信息
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.UpdateCache(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            更新缓存
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.UpdateCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult,Ivony.Html.Web.Mvc.IMvcCachePolicy)">
            <summary>
            更新缓存数据
            </summary>
            <param name="context">控制器上下文</param>
            <param name="result">Action执行结果</param>
            <param name="mvcCachePolicy">MVC 缓存策略</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.UpdateCache(Ivony.Html.Web.ICachedResponse,System.Web.Mvc.ControllerContext,Ivony.Html.Web.CachePolicy)">
            <summary>
            更新缓存数据
            </summary>
            <param name="cachedResponse">可被缓存的响应数据</param>
            <param name="context">MVC 请求上下文</param>
            <param name="policy">缓存策略</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheFilterBase.GetCachedResponse(System.Web.Mvc.ActionResult)">
            <summary>
            从执行结果中获取可被缓存的响应数据
            </summary>
            <param name="result">Action 执行结果</param>
            <returns>可被缓存的响应数据，失败则返回 null</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ConflictCheckList">
            <summary>
            简单路由表冲突检查表
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ConflictCheckList.AddRuleAndCheckConflict(Ivony.Html.Web.Mvc.SimpleRouteRule,Ivony.Html.Web.Mvc.SimpleRouteRule@)">
            <summary>
            在冲突检测表中添加一条记录，并检测与现有规则是否冲突。
            </summary>
            <param name="rule">要添加的规则</param>
            <param name="conflictRule">与之相冲突的规则，如果有的话</param>
            <returns>是否成功</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider">
            <summary>
            IMvcCachePolicyProvider 的一个标准抽象实现
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.IMvcCachePolicyProvider">
            <summary>
            MVC 环境的缓存策略提供程序所需要实现的接口
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IMvcCachePolicyProvider.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context">控制器上下文</param>
            <param name="action">Action 信息</param>
            <param name="parameters">Action 参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.#ctor">
            <summary>
            创建 ControllerCachePolicyProvider 实例
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context">当前请求的 MVC 上下文</param>
            <param name="action">当前执行的 Action</param>
            <param name="parameters">Action 的参数</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.CreateActionCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建 Action 的缓存策略
            </summary>
            <param name="context">当前控制器上下文</param>
            <param name="action">当前执行的 Action</param>
            <param name="parameters">Action 的参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.CreateToken(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建 CacheToken
            </summary>
            <param name="typeName">类型名，一般可以取 Action 的名称</param>
            <param name="parameters">参数列表，一般可以使用 Action 的参数列表</param>
            <returns>针对指定类型和参数的 CacheToken</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.RegisterCacheProvider(Ivony.Html.Web.Mvc.ControllerCachePolicyProvider)">
            <summary>
            注册控制器缓存策略提供程序
            </summary>
            <param name="provider">缓存策略提供程序</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ControllerCachePolicyProvider.GetProvider(System.String)">
            <summary>
            获取缓存策略提供程序
            </summary>
            <param name="controllerName">控制器名称</param>
            <returns>该控制器的缓存策略提供程序，如果有的话</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.JumonyMasterView">
            <summary>
            母板页视图
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewBase">
            <summary>
            所有 HTML 视图处理程序的基类，实现 IView 接口，并提供内置的 HTML 扩展功能以及视图结果的缓存。
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ICacheableResult">
            <summary>
            定义可被缓存的 ActionResult
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ICacheableResult.GetCachedResponse">
            <summary>
            获取缓存的响应
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.Initialize(System.String,System.Boolean)">
            <summary>
            初始化视图设置
            </summary>
            <param name="virtualPath">虚拟路径</param>
            <param name="partialMode">是否为部分视图模式</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.LoadDocument(System.String)">
            <summary>
            派生类可以重写此方法自定义加载虚拟路径处的文档的逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.InitializeScope(System.String,System.Boolean)">
            <summary>
            初始化视图渲染范畴
            </summary>
            <returns>渲染和处理的范畴，一般情况下是 IHtmlDocument</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.FindPartialScope(Ivony.Html.IHtmlDocument)">
            <summary>
            查找部分视图渲染范畴
            </summary>
            <param name="document">加载的文档</param>
            <returns>渲染范畴</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.InitializeView(System.Web.Mvc.ViewContext)">
            <summary>
            初始化视图，准备处理和渲染
            </summary>
            <param name="viewContext">视图上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.RenderCore(System.IO.TextWriter)">
            <summary>
            处理和渲染视图
            </summary>
            <param name="writer">文本编写器</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            实现处理和渲染逻辑
            </summary>
            <param name="scope">要渲染的范畴</param>
            <returns>渲染后的字符串</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.UpdateCache(System.String)">
            <summary>
            更新缓存
            </summary>
            <param name="content">渲染结果</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.Dispose">
            <summary>
            视图引擎调用此方法清理视图所使用的所有非托管资源
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.CreateViewDataContainer">
            <summary>
            创建 IViewDataContainer 实例
            </summary>
            <returns>包含当前视图的 IViewDataContainer 实例</returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.ViewContext">
            <summary>
            获取视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.ViewModel">
            <summary>
            获取视图模型
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.ViewData">
            <summary>
            获取视图数据
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.HttpContext">
            <summary>
            获取当前 HTTP 上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.Trace">
            <summary>
            获取当前 HTTP 响应的追踪上下文对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.RequestContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.RouteData">
            <summary>
            获取路由信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.TempData">
            <summary>
            获取 TempData
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.Cache">
            <summary>
            获取缓存提供对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.Url">
            <summary>
            获取 Url 帮助器
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.RawViewContext">
            <summary>
            获取原始的（顶层的）视图上下文
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.VirtualPath">
            <summary>
            视图的虚拟路径
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.PartialMode">
            <summary>
            是否为部分视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.Scope">
            <summary>
            获取渲染和处理的范畴
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewBase.CachedResponse">
            <summary>
            缓存结果
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewBase.ViewDataContainer">
            <summary>
            为视图提供 ViewData 的容器类型
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewBase.ViewDataContainer.#ctor(Ivony.Html.Web.Mvc.ViewBase)">
            <summary>
            创建 ViewDataContainer 对象
            </summary>
            <param name="view"></param>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.IContentView">
            <summary>
            可使用母板页的内容视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            处理和渲染指定 HTML 范畴
            </summary>
            <param name="scope">要处理和渲染的范畴</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.InitializeFilters">
            <summary>
            初始化筛选器，获取当前视图所需要应用的筛选器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.AddGeneratorMetaData">
            <summary>
            添加 &lt;meta name="generator" value="Jumony" /&gt; 标记
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.OnPreProcess">
            <summary>
            引发 PreProcess 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.OnPostProcess">
            <summary>
            引发 PostProcess 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.OnPreRender">
            <summary>
            引发 PreRender 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.OnPostRender">
            <summary>
            引发 PostRender 事件
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.Process(Ivony.Html.IHtmlContainer)">
            <summary>
            派生类实现此方法完成对视图的处理工作
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.ProcessMaster(Ivony.Html.Web.Mvc.JumonyMasterView)">
            <summary>
            派生类实现此方法处理母板视图
            </summary>
            <param name="MasterView">页面的母板视图</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.RenderContent(Ivony.Html.IHtmlAdapter[])">
            <summary>
            渲染 HTML 内容
            </summary>
            <returns>渲染结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyView.RenderContent(Ivony.Html.IHtmlContainer,System.Boolean,Ivony.Html.IHtmlAdapter[])">
            <summary>
            渲染 HTML 内容。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyView.MasterView">
            <summary>
            母板视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyView.Filters">
            <summary>
            获取所有视图筛选器
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.JumonyView.PreProcess">
            <summary>
            初识化结束后，进行任何处理前引发此事件
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.JumonyView.PostProcess">
            <summary>
            对文档的所有处理完成后引发此事件
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.JumonyView.PreRender">
            <summary>
            完成所有渲染准备工作后，渲染文档之前引发此事件。
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.JumonyView.PostRender">
            <summary>
            文档渲染完毕后引发此事件
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyView.RenderAdapters">
            <summary>
            自定义渲染过程的 HTML 转换器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyMasterView.Initialize(System.String)">
            <summary>
            初始化母板页视图
            </summary>
            <param name="virtualPath">母板页路径</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyMasterView.RenderCore(Ivony.Html.IHtmlContainer)">
            <summary>
            重写此方法以屏蔽直接渲染母板视图
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyMasterView.System#Web#Mvc#IView#Render(System.Web.Mvc.ViewContext,System.IO.TextWriter)">
            <summary>
            重写此方法以屏蔽直接渲染母板视图
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyMasterView.Document">
            <summary>
            母板页文档
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.GlobalCacheFilter">
            <summary>
            全局缓存筛选器，在 ASP.NET MVC 3 中将此筛选器加入全局筛选器，即可使得默认缓存策略运用于全局。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.GlobalCacheFilter.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            创建缓存策略
            </summary>
            <param name="context">控制器上下文</param>
            <param name="action">Action 信息</param>
            <param name="parameters">Action 参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.CacheableAttribute">
            <summary>
            用于指定 Action 或 Controller 应缓存输出结果。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheableAttribute.#ctor">
            <summary>
            创建 CacheableAttribute 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheableAttribute.#ctor(System.Type)">
            <summary>
            利用指定的缓存策略提供程序创建 HtmlCacheableAttribute 对象。
            </summary>
            <param name="policyProviderType">缓存策略提供程序类型</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheableAttribute.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取缓存策略
            </summary>
            <param name="context">MVC 请求上下文</param>
            <param name="action">Action 信息</param>
            <param name="parameters">Action 参数</param>
            <returns>缓存策略</returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.CacheableAttribute.CachePolicyProvider">
            <summary>
            获取缓存策略提供程序
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.CacheableResultHelper">
            <summary>
            提供 ICacheableResult 的一些扩展
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheableResultHelper.GetCachedResult(Ivony.Html.Web.Mvc.ICacheableResult)">
            <summary>
            获取用于输出缓存的 ActionResult
            </summary>
            <param name="cachable">已被缓存的响应信息</param>
            <returns>用于输出缓存的 ActionResult</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.CacheableResultHelper.ToCachedResult(Ivony.Html.Web.ICachedResponse)">
            <summary>
            从缓存的输出创建一个 ActionResult
            </summary>
            <param name="response">已被缓存的输出</param>
            <returns>用于输出缓存的 ActionResult</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.IMvcCachePolicy">
            <summary>
            定义 MVC 上下文相关的缓存策略
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IMvcCachePolicy.UpdateCache(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionResult)">
            <summary>
            创建缓存项
            </summary>
            <param name="context">当前 MVC 上下文</param>
            <param name="result">要缓存的执行结果</param>
            <returns></returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.IViewFilter">
            <summary>
            定义视图筛选器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IViewFilter.OnPreProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在处理 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IViewFilter.OnPostProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在处理 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IViewFilter.OnPreRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在渲染 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IViewFilter.OnPostRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在渲染 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewFilterAttribute">
            <summary>
            表示所有视图筛选器特性的基类
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            重写 OnActionExecuting 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnActionExecuted(System.Web.Mvc.ActionExecutedContext)">
            <summary>
            重写 OnActionExecuted 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            重写 OnResultExecuting 方法，在 ViewData 中注册视图筛选器
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            重写 OnResultExecuted 方法，不进行任何操作
            </summary>
            <param name="filterContext">筛选器上下文</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnPreProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在处理 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnPostProcess(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在处理 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnPreRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在渲染 HTML 文档之前由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewFilterAttribute.OnPostRender(System.Web.Mvc.ViewContext,Ivony.Html.Web.Mvc.JumonyView)">
            <summary>
            在渲染 HTML 文档之后由 Jumony 框架调用
            </summary>
            <param name="context">视图上下文</param>
            <param name="view">正在负责处理的视图对象</param>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.IViewProvider">
            <summary>
            自定义视图提供程序
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.IViewProvider.TryCreateView(System.Web.Mvc.ControllerContext,System.Web.Hosting.VirtualPathProvider,System.String,System.Boolean)">
            <summary>
            尝试创建自定义视图对象
            </summary>
            <param name="context">上下文信息</param>
            <param name="provider">用于获取虚拟文件的虚拟路径提供程序</param>
            <param name="virtualPath">用于查找视图的虚拟路径</param>
            <param name="isPartial">是否应创建部分视图</param>
            <returns>自定义视图对象</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.JumonyUrlHelper">
            <summary>
            扩展 UrlHelper 提供 Jumony 特有的方法。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.#ctor(Ivony.Html.Web.Mvc.ViewBase)">
            <summary>
            创建 JumonyUrlHelper 实例
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.ProcessActionUrls(Ivony.Html.IHtmlContainer)">
            <summary>
            处理所有 Action 路由
            </summary>
            <param name="container">包含所有要处理元素的 HTML 容器</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.SetRouteValues(Ivony.Html.IHtmlElement,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            为指定元素设置路由参数值，此设置会覆盖元素属性上同名路由参数的设置。
            </summary>
            <param name="element">要设置路由参数的元素</param>
            <param name="routeValues">要设置的路由参数</param>
            <exception cref="T:System.NotSupportedException">元素没有支持路由的属性</exception>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.GetRouteValues(Ivony.Html.IHtmlElement)">
            <summary>
            从元素标签中获取所有的路由值
            </summary>
            <param name="element">要获取分析路由值的元素</param>
            <returns>获取的路由值</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.ResolveUri(Ivony.Html.IHtmlContainer,System.String)">
            <summary>
            转换容器中所有 URI 与当前请求匹配。
            </summary>
            <param name="container">确定要转换 URI 范围的容器</param>
            <param name="baseVirtualPath">容器的基路径</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.ResolveUri(Ivony.Html.IHtmlAttribute,System.String)">
            <summary>
            转换 URI 与当前请求匹配
            </summary>
            <param name="attribute">HTML 属性</param>
            <param name="baseVirtualPath">基路径</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyUrlHelper.ResolveVirtualPath(System.String,System.String)">
            <summary>
            转换虚拟路径
            </summary>
            <param name="baseVirtualPath">基路径</param>
            <param name="virtualPath">设置的虚拟路径（相对或绝对）</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyUrlHelper.VirtualPath">
            <summary>
            视图基路径
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.MvcCachePolicyProviderWrapper">
            <summary>
            包装原始的 ICachePolicyProvider 对象，使其成为一个 IMvcCachePolicyProvider 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcCachePolicyProviderWrapper.#ctor(Ivony.Html.Web.ICachePolicyProvider)">
            <summary>
            创建 MvcCachePolicyProviderWrapper 对象
            </summary>
            <param name="provider">需要被包装的原始的 ICachePolicyProvider 对象</param>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.MvcConfiguration">
            <summary>
            保存 Jumony for MVC 的一些配置信息
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcConfiguration.IgnorePartialRenderException">
            <summary>
            忽略部分视图渲染异常，继续渲染页面其它部分，默认为 false
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcConfiguration.EnableParallelPartialRender">
            <summary>
            是否允许并行进行部分视图渲染，默认值为 false
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcConfiguration.PartialRenderTimeout">
            <summary>
            获取或设置部分视图的渲染超时时间，设置为任何小于等于零的时间都等于没有渲染超时。默认为零
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcConfiguration.DisableGeneratorTag">
            <summary>
            指示是否禁止生成generator的meta标签，默认是 false 。
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.MvcFormValidator">
            <summary>
            配合 ASP.NET MVC 验证模型使用的表单验证器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFormValidator.#ctor(Ivony.Html.Forms.HtmlForm,System.Web.Mvc.ModelStateDictionary)">
            <summary>
            创建 MvcFormValidator 的实例
            </summary>
            <param name="form">所针对的表单对象</param>
            <param name="modelStates">表单（模型）验证信息</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFormValidator.CreateFieldValidator(Ivony.Html.Forms.IHtmlInputControl,System.Web.Mvc.ModelState)">
            <summary>
            派生类重写此方法创建字段验证器
            </summary>
            <param name="input">输入控件</param>
            <param name="state">模型验证信息</param>
            <returns>创建的字段验证器</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFormValidator.FailedMessageContainer(Ivony.Html.Forms.IHtmlInputControl)">
            <summary>
            获取验证失败信息需要呈现的容器，默认实现查找 errorFor 属性值等于输入控件名的元素
            </summary>
            <param name="input">输入控件</param>
            <returns>针对此输入控件的错误提示容器</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.MvcFieldValidator">
            <summary>
            配合 ASP.NET MVC 验证模型使用的字段验证器
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFieldValidator.#ctor(Ivony.Html.Forms.IHtmlInputControl,System.Web.Mvc.ModelState)">
            <summary>
            创建 MvcFieldValidator 对象
            </summary>
            <param name="input"></param>
            <param name="state"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFieldValidator.FailedMessage">
            <summary>
            获取验证失败的消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFieldValidator.RuleDescription">
            <summary>
            获取验证规则的描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcFieldValidator.Validate">
            <summary>
            执行字段验证
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcFieldValidator.InputControl">
            <summary>
            获取验证的输入控件
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcFieldValidator.IsValid">
            <summary>
            确定是否验证通过
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.PartialRenderAdapter">
            <summary>
            用于渲染部分视图的 HTML 渲染代理
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.MakeHelper">
            <summary>
            创建 HtmlHelper 对象
            </summary>
            <returns>创建的 HtmlHelper 对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.#ctor(Ivony.Html.Web.Mvc.ViewBase)">
            <summary>
            创建 PartialRenderAdapter 实例
            </summary>
            <param name="view">需要渲染部分视图的宿主视图</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.Render(Ivony.Html.IHtmlElement,System.IO.TextWriter)">
            <summary>
            渲染 partial 标签
            </summary>
            <param name="element">partial 标签</param>
            <param name="writer">用于渲染的文本编写器</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.RenderPartial(Ivony.Html.IHtmlElement,System.IO.TextWriter)">
            <summary>
            渲染部分视图（重写此方法接管 partial 处理逻辑）。
            </summary>
            <param name="partialElement">partial 元素</param>
            <param name="writer">输出渲染结果的 TextWriter 对象</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.RenderPartialAsync(Ivony.Html.IHtmlElement,System.Exception@)">
            <summary>
            异步渲染部分视图
            </summary>
            <param name="partialElement">partial 元素</param>
            <param name="exception">渲染过程中产生的异常</param>
            <returns>渲染结果</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.PartialRenderAdapter.RenderPartial(Ivony.Html.IHtmlElement)">
            <summary>
            渲染部分视图（重写此方法以实现自定义输出 partial 元素）
            </summary>
            <param name="partialElement">partial 元素</param>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.PartialRenderAdapter.CssSelector">
            <summary>
            一个 CSS 选择器，用于选取 partial 标签
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.RouteExtensions">
            <summary>
            注册路由的一些扩展方法
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.MapAction(Ivony.Html.Web.Mvc.SimpleRouteTable,System.String,System.String,System.String,System.String[])">
            <summary>
            映射一个 Action 路由
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="controller">Controller 名称</param>
            <param name="action">Action 名称</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.MapRoute(Ivony.Html.Web.Mvc.SimpleRouteTable,System.String,System.Object,System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.MapRoute(Ivony.Html.Web.Mvc.SimpleRouteTable,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.MapRoute(Ivony.Html.Web.Mvc.SimpleRouteTable,System.String,System.String,System.Object,System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="name">路由规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.MapRoute(Ivony.Html.Web.Mvc.SimpleRouteTable,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            映射一个路由规则
            </summary>
            <param name="routeTable">简单路由表实例</param>
            <param name="name">路由规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">默认/静态路由值</param>
            <param name="queryKeys">可用于 QueryString 的路由值</param>
            <returns>返回简单路由表实例，便于链式注册</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.SimpleRouteTable(System.Web.Routing.RouteCollection)">
            <summary>
            获取内建的简单路由表实例，如果没有则创建一个。
            </summary>
            <param name="routes">系统路由集合</param>
            <returns>内建的简单路由表实例</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.SimpleAreaRouteTable(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            获取指定区域的简单区域路由表实例，如果没有则创建一个。
            </summary>
            <param name="context">区域注册上下文</param>
            <returns>内建的简单区域路由表实例</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.RouteExtensions.RegisterSimpleRouteTable(System.Web.Routing.RouteCollection,Ivony.Html.Web.Mvc.SimpleRouteTable)">
            <summary>
            向路由集合中注册一个简单路由表实例
            </summary>
            <param name="routes">路由集合</param>
            <param name="routeTable">简单路由表实例</param>
            <returns>路由集合</returns>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.SimpleRouteRule">
            <summary>
            简单路由规则，定义简单路由表的路由规则
            </summary>
        </member>
        <member name="F:Ivony.Html.Web.Mvc.SimpleRouteRule.staticParagraphPattern">
            <summary>定义匹配静态路径段的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Web.Mvc.SimpleRouteRule.dynamicParagraphPattern">
            <summary>定义匹配动态路径段的正则表达式</summary>
        </member>
        <member name="F:Ivony.Html.Web.Mvc.SimpleRouteRule.urlPattern">
            <summary>定义匹配 URL 模式的正则表达式</summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            创建一个简单路由规则
            </summary>
            <param name="name">规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">静态/默认路由值</param>
            <param name="queryKeys">可用于 QueryString 的参数</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.CreateVirtualPath(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据路由值创建虚拟路径
            </summary>
            <param name="routeValues">路由值</param>
            <returns>创建的虚拟路径</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.IsMatch(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            检查指定的路由值是否满足约束
            </summary>
            <param name="values">路由值</param>
            <returns>是否满足路由规则的约束</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.Mutex(Ivony.Html.Web.Mvc.SimpleRouteRule,Ivony.Html.Web.Mvc.SimpleRouteRule)">
            <summary>
            检查两个路由规则是否互斥。
            </summary>
            <param name="rule1">路由规则1</param>
            <param name="rule2">路由规则2</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.EqualsConstraints(Ivony.Html.Web.Mvc.SimpleRouteRule)">
            <summary>
            比较两个路由规则约束是否一致
            </summary>
            <param name="rule">要比较的路由规则</param>
            <returns>两个规则的约束是否一致</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.GetRouteValues(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            获取路由值
            </summary>
            <param name="virtualPath">当前请求的虚拟路径</param>
            <param name="queryString">当前请求的查询数据</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteRule.ToString">
            <summary>
            获取一个字符串，其描述了这个简单路由规则。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.Name">
            <summary>
            路由规则的名称
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.LimitedQueries">
            <summary>
            是否限制产生的 QueryString 不超过指定范围（查询键）
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.Oneway">
            <summary>
            指示路由规则是否为单向的，单向路由只路由请求，不产生虚拟路径。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.Paragraphes">
            <summary>
            获取所有路径段
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.RouteKeys">
            <summary>
            获取所有路由键（包括静态和动态的）
            </summary>
            <remarks>
            路由键的值会作为虚拟路径的一部分
            </remarks>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.QueryKeys">
            <summary>
            获取所有查询键
            </summary>
            <remarks>
            构造虚拟路径时，查询键都是可选的。
            查询键的值会被产生为查询字符串。
            </remarks>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.AllKeys">
            <summary>
            获取所有键（包括路由键和查询键）
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.DynamicRouteKyes">
            <summary>
            获取所有动态路由键
            </summary>
            <remarks>
            动态路由键的值不能包含特殊字符
            </remarks>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.StaticPrefix">
            <summary>
            获取URL模式的静态前缀
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.UrlPattern">
            <summary>
            获取整个URL模式
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.StaticRouteValues">
            <summary>
            获取所有的静态值
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.SimpleRouteTable">
            <summary>
            规则所属的简单路由表实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteRule.DataTokens">
            <summary>
            获取简单路由规则的扩展数据标记
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.SimpleRouteTable">
            <summary>
            简单路由表，提供简单的路由服务
            </summary>
        </member>
        <member name="F:Ivony.Html.Web.Mvc.SimpleRouteTable.RouteValuesCacheKeyPrefix">
            <summary>
            定义通过路由值获取虚拟路径的缓存键前缀。
            </summary>
        </member>
        <member name="F:Ivony.Html.Web.Mvc.SimpleRouteTable.RouteUrlCacheKeyPrefix">
            <summary>
            定义通过虚拟路径获取路由值的缓存键前缀。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            获取请求的路由数据
            </summary>
            <param name="httpContext">HTTP 请求</param>
            <returns>路由数据</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.CloneRouteData(System.Web.Routing.RouteData)">
            <summary>
            创建 RouteData 的副本
            </summary>
            <param name="routeData">要创建副本的 RouteData</param>
            <returns>创建的副本</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            尝试从路由值创建虚拟路径
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="values">路由值</param>
            <returns>虚拟路径信息</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.CreateCacheKey(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            创建缓存键
            </summary>
            <param name="values">要创建缓存键的字典</param>
            <returns>创建的缓存键</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.AddRule(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            添加一个路由规则
            </summary>
            <param name="name">规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">静态/默认路由值</param>
            <param name="queryKeys">可用于 QueryString 的参数，若为null则表示无限制</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.AddRule(Ivony.Html.Web.Mvc.SimpleRouteRule)">
            <summary>
            添加一个路由规则
            </summary>
            <param name="rule">路由规则</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.AddRuleAndCheckConflict(Ivony.Html.Web.Mvc.SimpleRouteRule,Ivony.Html.Web.Mvc.SimpleRouteRule@)">
            <summary>
            在冲突检测表中添加一条规则并检查冲突
            </summary>
            <param name="rule">要添加的规则</param>
            <param name="conflictRule">与之相冲突的规则</param>
            <returns>是否添加成功</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleRouteTable.#ctor(System.String,System.Web.Routing.IRouteHandler,System.Boolean)">
            <summary>
            创建一个简单路由表实例
            </summary>
            <param name="name">简单路由表名称</param>
            <param name="handler">处理路由请求的对象</param>
            <param name="mvcCompatible">是否产生MVC兼容的虚拟路径（去除~/）</param>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.DebugMode">
            <summary>
            是否打开路由调试模式
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.Name">
            <summary>
            获取简单路由表实例名称
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.Routes">
            <summary>
            获取简单路由表所属的路由集合
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.MvcCompatible">
            <summary>
            是否产生MVC兼容的虚拟路径（去除~/）
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.Rules">
            <summary>
            路由表中定义的路由规则
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.Handler">
            <summary>
            处理路由请求的对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleRouteTable.UrlEncoding">
            <summary>
            获取 URL 默认编码格式
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.SimpleAreaRouteTable">
            <summary>
            用于 MVC 的简单区域路由表，提供某一区域的简单路由服务
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            构建简单区域路由表对象
            </summary>
            <param name="areaName">区域名</param>
            <param name="namespaces">区域所要搜索的命名空间</param>
            <param name="useNamespaceFallback">是否回溯搜索无 Area 命名空间</param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.AddRule(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String[])">
            <summary>
            添加一个路由规则
            </summary>
            <param name="name">规则名称</param>
            <param name="urlPattern">URL 模式</param>
            <param name="routeValues">静态/默认路由值</param>
            <param name="queryKeys">可用于 QueryString 的参数</param>
            <returns>创建的简单路由规则</returns>
            <remarks>
            简单区域路由表会自动为路由规则增加一个静态路由值 area 保存当前区域名。
            </remarks>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.GetRouteData(System.Web.HttpContextBase)">
            <summary>
            获取请求的路由数据
            </summary>
            <param name="httpContext">HTTP 请求</param>
            <returns>路由数据</returns>
            <remarks>
            简单区域路由表获取路由数据后会自动设置区域所需的 DataTokens
            </remarks>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.GetVirtualPath(System.Web.Routing.RequestContext,System.Web.Routing.RouteValueDictionary)">
            <summary>
            尝试从路由值创建虚拟路径
            </summary>
            <param name="requestContext">当前请求上下文</param>
            <param name="values">路由值</param>
            <remarks>
            简单区域路由表获取路由数据后会自动设置区域所需的 DataTokens
            </remarks>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.AreaName">
            <summary>
            获取路由表所适用的区域名
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.Namespaces">
            <summary>
            区域所要搜索的命名空间
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.SimpleAreaRouteTable.UseNamespaceFallback">
            <summary>
            是否回溯搜索无 Area 命名空间
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.JumonyViewEngine">
            <summary>
            基于 Jumony 技术的视图引擎
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.#ctor">
            <summary>
            创建 JumonyViewEngine 对象
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            创建部分视图
            </summary>
            <param name="controllerContext"></param>
            <param name="partialPath"></param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
            <summary>
            创建页面视图
            </summary>
            <param name="controllerContext">控制器上下文</param>
            <param name="viewPath">视图路径</param>
            <param name="masterPath">母板路径</param>
            <exception cref="T:System.NotSupportedException">当 masterPath 参数不为空，且当前创建的视图不支持母板时引发</exception>
            <returns>页面视图对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.CreateMaster(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            创建视图母板
            </summary>
            <param name="controllerContext">控制器上下文</param>
            <param name="masterPath">母板路径</param>
            <returns>创建的视图母板</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.CreateViewCore(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            创建视图对象
            </summary>
            <param name="context">控制器上下文</param>
            <param name="virtualPath">视图虚拟路径</param>
            <param name="isPartial">是否为部分视图</param>
            <returns>视图对象</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.TryCreateViewHandler(System.String,System.Boolean)">
            <summary>
            尝试创建自定义视图处理程序对象
            </summary>
            <param name="virtualPath">视图虚拟路径</param>
            <param name="isPartial">是否应创建为部分视图</param>
            <returns>若有自定义视图处理程序，则返回。</returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.JumonyViewEngine.OnViewCreated(Ivony.Html.Web.Mvc.JumonyViewEventArgs)">
            <summary>
            引发 ViewCreated 事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyViewEngine.ViewProviders">
            <summary>
            获取或设置自定义视图提供程序
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.JumonyViewEngine.ViewCreated">
            <summary>
            当视图被成功创建时发生
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.JumonyViewEventArgs">
            <summary>
            为 Jumony 视图引擎事件提供参数
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyViewEventArgs.View">
            <summary>
            获取创建的视图对象
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.JumonyViewEventArgs.ViewProvider">
            <summary>
            获取创建视图对象的 ViewProvider ，若不是由自定义视图提供程序创建，则为 null
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewElementAdapter">
            <summary>
            用于渲染 view 标签的元素渲染代理
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewElementAdapter.#ctor(System.Web.Mvc.ViewContext)">
            <summary>
            创建 ViewElementAdapter 对象
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewElementAdapter.Render(Ivony.Html.IHtmlElement,System.IO.TextWriter)">
            <summary>
            渲染 view 标签
            </summary>
            <param name="element">view 标签元素</param>
            <param name="writer">HTML 编写器</param>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewElementAdapter.CssSelector">
            <summary>
            用于匹配 view 标签的 CSS 选择器
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewHandler">
            <summary>
            HTML 视图处理程序基类
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewHandler.ProcessDocument">
            <summary>
            派生类重写此方法自定义文档处理逻辑
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.ViewHandler.Process(Ivony.Html.IHtmlContainer)">
            <summary>
            重写 Process 方法，调用 ProcessDocument 方法处理页面逻辑
            </summary>
            <param name="scope"></param>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewHandler.Document">
            <summary>
            获取页面文档对象
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.ViewHandler`1">
            <summary>
            强类型 HTML 视图处理程序的基类
            </summary>
            <typeparam name="T">Model 的类型</typeparam>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.ViewHandler`1.ViewModel">
            <summary>
            模型
            </summary>
        </member>
        <member name="T:Ivony.Html.Web.Mvc.MvcEnvironment">
            <summary>
            提供 Jumony for MVC 的环境支持
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcEnvironment.Initialize">
            <summary>
            此方法由 ASP.NET 4 系统调用，不应从用户代码中直接调用。
            </summary>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcEnvironment.RegisterRouteBeforeSimpleRouteTable(System.Web.Routing.RouteBase)">
            <summary>
            调用此方法确保路由在简单路由表实例前注册。
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcEnvironment.CreateCachePolicy(System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取当前请求的缓存策略
            </summary>
            <param name="context">当前请求的 MVC 上下文</param>
            <param name="action">请求的 Action</param>
            <param name="parameters">Action 的参数信息</param>
            <returns></returns>
        </member>
        <member name="M:Ivony.Html.Web.Mvc.MvcEnvironment.LoadDocument(System.String)">
            <summary>
            分析和加载文档。
            </summary>
            <param name="virtualPath">文档的虚拟路径</param>
            <returns>加载的文档对象</returns>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.JumonyViewEngine">
            <summary>
            获取 Jumony 视图引擎的默认实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.SimpleRouteTable">
            <summary>
            获取简单路由表的默认内建实例
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.Configuration">
            <summary>
            获取 Jumony for MVC 配置对象，可以对 Jumony for MVC 行为进行调整。
            </summary>
        </member>
        <member name="E:Ivony.Html.Web.Mvc.MvcEnvironment.ViewCreated">
            <summary>
            当任何一个 JumonyViewEngine 对象成功创建了视图时发生。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.CachePolicyProviders">
            <summary>
            全局缓存策略提供程序
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.CacheStorageProvider">
            <summary>
            获取默认的缓存储存提供程序
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.GlobalCacheFilter">
            <summary>
            全局缓存筛选器，在 ASP.NET MVC 3 中，将此过滤器加入全局过滤器集合中，即可对所有请求执行输出缓存。
            </summary>
        </member>
        <member name="P:Ivony.Html.Web.Mvc.MvcEnvironment.DefaultCachePolicyProvider">
            <summary>
            默认的缓存策略，由 HtmlProviders 提供
            </summary>
        </member>
    </members>
</doc>
